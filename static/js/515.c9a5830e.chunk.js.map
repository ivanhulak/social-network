{"version":3,"file":"static/js/515.c9a5830e.chunk.js","mappings":"kNAaA,EATwC,SAAH,GAA2B,IAAtBA,EAAK,EAALA,MAAOC,EAAE,EAAFA,GAAIC,EAAI,EAAJA,KACjD,OACI,4BACI,gBAAKC,MAAO,CAACC,SAAU,QAASC,IAAKL,EAAOM,IAAI,MAChD,SAAC,KAAO,CAACC,GAAE,kBAAaN,GAAK,SAAEC,MAG3C,E,UCRMM,EAAWC,EAAAA,GAAAA,IAAU,qEACH,YAAQ,SAALC,MAAkBC,IAAI,IACpC,YAAQ,SAALD,MAAkBE,YAAY,IAW9C,EARyC,SAAH,GAAmB,IAAdC,EAAO,EAAPA,QACvC,OACI,0BACI,SAACL,EAAQ,UAAEK,KAGvB,E,kDCNMC,EAAaL,EAAAA,GAAAA,OAAa,saAmB1BM,EAAmBC,EAAAA,KAAaC,MAAM,CACxCC,YAAaF,EAAAA,KACRG,UAAU,wBACVC,IAAI,IAAK,eAGLC,EAA8BC,EAAAA,MAAW,WAClD,IAAMC,GAAgBC,EAAAA,EAAAA,MAOtB,OACI,SAAC,KAAM,CAACC,oBAAoB,EACxBC,cAAe,CAAER,YAAa,IAC9BS,gBAAc,EACdZ,iBAAkBA,EAClBa,SAXO,SAACC,EAAoC,GACyC,IADtCC,EAAa,EAAbA,cAAeC,EAAS,EAATA,UAElER,EAASS,EAAAA,EAAAA,YAAoBH,EAAOX,cACpCa,EAAU,IACVD,GAAc,EAClB,EAMyB,SAChB,gBAAGD,EAAM,EAANA,OAAQI,EAAM,EAANA,OAAQC,EAAY,EAAZA,aAAcC,EAAU,EAAVA,WAAYC,EAAY,EAAZA,aAAcC,EAAY,EAAZA,aAAY,OACpE,kBAAMT,SAAUQ,EAAa,WACzB,SAAC,KAAK,CACFE,KAAK,OACLC,GAAG,WACHrC,KAAK,cACLsC,YAAY,aACZC,SAAUP,EACVQ,OAAQP,EACRQ,MAAOd,EAAOX,YACdf,MAAO,CAAEyC,MAAO,aAEnBX,EAAOf,cAAe,SAAC,IAAY,UAAEe,EAAOf,eAC7C,SAACJ,EAAU,CAACwB,KAAK,SAASO,SAAUR,EAAa,SAAC,mBAC/C,GAIvB,ICzDMS,EAAgBrC,EAAAA,GAAAA,IAAU,kUAYX,YAAQ,SAALC,MAAkBE,YAAY,IA2BtD,EAnB0B,WACtB,IAAMmC,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,YAAYH,OAAO,IACxEI,GAAWH,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,YAAYC,QAAQ,IAEhF,OACI,UAACL,EAAa,YACV,iBAAKM,UAAU,aAAY,WACvB,gBAAKA,UAAU,eAAc,SACxBL,EAAQM,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAU,CAACrD,GAAIqD,EAAErD,GAAIC,KAAMoD,EAAEpD,KAAMF,MAAOsD,EAAEtD,OAAYsD,EAAErD,GAAK,OAEtF,gBAAKmD,UAAU,gBAAe,SACzBD,EAASE,KAAI,SAAAE,GAAC,OAAI,SAAC,EAAW,CAAC1C,QAAS0C,EAAE1C,SAAc0C,EAAEtD,GAAK,UAGxE,SAACoB,EAAiB,MAG9B,C","sources":["components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/DialogsFormikForm.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["import React from \"react\";\nimport { NavLink } from 'react-router-dom';\n\ntype PropsType = { photo: string, id: number, name: string }\nconst DialogItem: React.FC<PropsType> = ({photo, id, name}) => {\n    return (\n        <div>\n            <img style={{maxWidth: '50px'}} src={photo} alt=\"\" />\n            <NavLink to={`/dialog/${id}`}>{name}</NavLink>\n        </div>\n    );\n}\n\nexport default DialogItem;","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Messages = styled.div`\n    background-color: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.headersColor};\n`;\ntype PropsType = { message: string }\nconst MessageItem: React.FC<PropsType> = ({message}) => {\n    return (\n        <div>\n            <Messages>{message}</Messages>\n        </div>\n    );\n}\n\nexport default MessageItem;","import React from \"react\";\nimport { Field, Formik } from \"formik\";\nimport * as yup from 'yup';\nimport styled from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport { actions } from \"../../redux/dialogs-reducer\";\nimport { ErrorMessage } from \"../Profile/Profile/EditProfileFormikForm\";\n\nconst SendButton = styled.button`\n    color: #000;\n    background-color: #eee;\n    font-size: 20px;\n    border: 1px solid #000;\n    border-radius: 24px;\n    padding: 5px 15px;\n    cursor: pointer;\n    transition: ease 0.3s all;\n    &:hover {\n        background-color: #000;\n        color: #fff;\n    }\n    &:active {\n        background-color: #666;\n        color: #fff;\n        transform: translate(2px, 3px);\n    }\n`;\nconst validationSchema = yup.object().shape({\n    sentMessage: yup.string()\n        .typeError('Needs to be a string')\n        .max(160, 'Too Long!'),\n})\ntype DialogsFormikFormValuesType = { sentMessage: string }\nexport const DialogsFormikForm: React.FC = React.memo(() => {\n    const dispatch: any = useDispatch()\n    const submit = (values: DialogsFormikFormValuesType, { setSubmitting, resetForm }:\n        { setSubmitting: (isSubmitting: boolean) => void, resetForm: (value: any) => void }) => {\n        dispatch(actions.sendMessage(values.sentMessage));\n        resetForm('')\n        setSubmitting(false);\n    }\n    return (\n        <Formik enableReinitialize={true}\n            initialValues={{ sentMessage: '' }}\n            validateOnBlur\n            validationSchema={validationSchema}\n            onSubmit={submit}>\n            {({ values, errors, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\n                <form onSubmit={handleSubmit} >\n                    <Field\n                        type='text'\n                        as='textarea'\n                        name='sentMessage'\n                        placeholder='Enter text'\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.sentMessage}\n                        style={{ color: '#8000FF' }}\n                    />\n                    {errors.sentMessage && <ErrorMessage>{errors.sentMessage}</ErrorMessage>}\n                    <SendButton type=\"submit\" disabled={isSubmitting}>Send Message</SendButton>\n                </form>\n            )}\n        </Formik >\n    );\n})","import React from \"react\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport MessageItem from \"./MessageItem/MessageItem\";\nimport styled from \"styled-components\";\nimport { useSelector } from \"react-redux\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { DialogsFormikForm } from \"./DialogsFormikForm\";\n\nconst StyledDialogs = styled.div`\n    padding: 0px 30px;\n    .dialogsRow{\n        display: flex;\n        justify-content: flex-start;\n        gap: 50px;\n        font-size: 22px;\n        margin-bottom: 30px;\n    }\n    .dialogsBlock{\n        a{\n            text-decoration: none;\n            color: ${({ theme }) => theme.headersColor};\n        }\n    }\n`;\n\nexport type DialogsFormDataValuesType = {\n    sentMessage: string\n}\nconst Dialogs: React.FC = () => {\n    const dialogs = useSelector((state: AppStateType) => state.dialogsPage.dialogs)\n    const messages = useSelector((state: AppStateType) => state.dialogsPage.messages)\n    \n    return (\n        <StyledDialogs>\n            <div className='dialogsRow'>\n                <div className='dialogsBlock'>\n                    {dialogs.map(d => <DialogItem id={d.id} name={d.name} photo={d.photo} key={d.id}/>)}\n                </div>\n                <div className='messagesBlock'>\n                    {messages.map(m => <MessageItem message={m.message} key={m.id}/>)}\n                </div>\n            </div>\n            <DialogsFormikForm/>\n        </StyledDialogs>\n    );\n}\n\nexport default Dialogs;"],"names":["photo","id","name","style","maxWidth","src","alt","to","Messages","styled","theme","body","headersColor","message","SendButton","validationSchema","yup","shape","sentMessage","typeError","max","DialogsFormikForm","React","dispatch","useDispatch","enableReinitialize","initialValues","validateOnBlur","onSubmit","values","setSubmitting","resetForm","actions","errors","handleChange","handleBlur","handleSubmit","isSubmitting","type","as","placeholder","onChange","onBlur","value","color","disabled","StyledDialogs","dialogs","useSelector","state","dialogsPage","messages","className","map","d","m"],"sourceRoot":""}